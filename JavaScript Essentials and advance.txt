JavaScript Essentials :-

Q.1-> What is JavaScript?

=>JavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.

Q.2->What is the use of is NaN function? 

=>The isNaN() function determines whether a value is NaN when converted to a number. Because coercion inside the isNaN() function can be surprising, you may alternatively want to use Number.isNaN().

Q.3->What is negative Infinity?

=>NEGATIVE_INFINITY is a special numeric value that is returned when an arithmetic operation or mathematical function generates a negative value greater than the largest representable number in JavaScript (i.e., more negative than -Number).

Q.4->Which company developed JavaScript? 

=>JavaScript was invented by Brendan Eich in 1995. It was developed for Netscape 2, and became the ECMA-262 standard in 1997. After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser.

Q.5->What are undeclared and undefined variables? 

=>Undeclared variables are those that have not been declared or defined in the current scope, while undefined variables are those that have been declared but not given a value. Understanding the difference between these two terms is crucial for writing correct and effective JavaScript code.

Q.6->Write the code for adding new elements dynamically? 

=><!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content=
		"width=device-width, initial-scale=1.0">

	<style>
		html,
		body {
			height: 100%;
			width: 100%;
		}

		.button {
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.tasks {
			display: flex;
			justify-content: center;
			align-items: center;
			flex-direction: column;
			margin-top: 20px;
		}
	</style>
</head>

<body>
	<div class="button">
		<button id="addTask">Add task</button>
	</div>
	<div class="tasks"></div>
	<script type="text/javascript">

		// Getting the parent element in which
		// the new div will be created
		let task = document.getElementsByClassName("tasks");

		// Getting the addTask button element
		let addTask = document.getElementById("addTask");
		
		// Adding onclick event to the button
		addTask.addEventListener('click', function () {
	
			// Traversing through collection of HTML
			// elements (tasks here)
			for (let i = 0; i < task.length; i++) {
				
				// New div element is created
				let newDiv = document.createElement("div");
					
				// Setting the attribute of class type to newDiv
				newDiv.setAttribute("class", "list");
					
				// innerText used to write the text in newDiv
				newDiv.innerText = "New Div created";
					
				// Finally append the newDiv to the
				// parent i.e. tasks
				task[i].append(newDiv);
			}
		})
	</script>
</body>

</html>

Q.7->What is the difference between ViewState and SessionState? 

=>Session state is saved on the server, ViewState is saved in the page.

Session state is usually cleared after a period of inactivity from the user (no request happened containing the session id in the request cookies).

The view state is posted on subsequent post back in a hidden field.

Q.8-> What is === operator? 

=>The strict equality (===) operator checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.

Q.9->How can the style/class of an element be changed?

=>It can be done in the following way:

document.getElementById(“myText”).style.fontSize = “20?;

or

document.getElementById(“myText”).className = “anyclass”;

Q.10->How to read and write a file using JavaScript? 

=>
1. file=fopen(getScriptPath(),0); The function fread() is used for reading the file content.
2. str = fread(file,flength(file) ; The function fwrite() is used to write the contents to the file.
3. file = fopen("c:\MyFile.txt", 3);// opens the file for writing.

Q.11->What are all the looping structures in JavaScript? 

=>JavaScript supports different kinds of loops:

for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object
while - loops through a block of code while a specified condition is true
do/while - also loops through a block of code while a specified condition is true

Q.12->How can you convert the string of any base to an integer in JavaScript? 

=>To convert a string to an integer parseInt(), Number(), and Unary operator(+) function is used in javascript. parseInt() function returns Nan( not a number) when the string doesn't contain number. If a string with a number is sent, then only that number will be returned as the output.

Q.13->What is the function of the delete operator? 

=>The delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.

Q.14->What are all the types of Pop up boxes available in JavaScript? 

=>
**** Alert Box ****
An alert box is often used if you want to make sure information comes through to the user.

When an alert box pops up, the user will have to click "OK" to proceed.

Syntax
window.alert("sometext");
The window.alert() method can be written without the window prefix.

Example
alert("I am an alert box!");


**** Confirm Box ****
A confirm box is often used if you want the user to verify or accept something.

When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.

If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.

Syntax
window.confirm("sometext");
The window.confirm() method can be written without the window prefix.

Example
if (confirm("Press a button!")) {
  txt = "You pressed OK!";
} else {
  txt = "You pressed Cancel!";
}


**** Prompt Box ****
A prompt box is often used if you want the user to input a value before entering a page.

When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value.

If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.

Syntax
window.prompt("sometext","defaultText");
The window.prompt() method can be written without the window prefix.

Example
let person = prompt("Please enter your name", "Harry Potter");
let text;
if (person == null || person == "") {
  text = "User cancelled the prompt.";
} else {
  text = "Hello " + person + "! How are you today?";
}

Q.15->What is the use of Void (0)?

=>JavaScript void 0 means returning undefined (void) as a primitive value. You might come across the term “JavaScript:void(0)” while going through HTML documents. It is used to prevent any side effects caused while inserting an expression in a web page

Q.16->How can a page be forced to load another page in JavaScript? 

=>In JavaScript, we can use window. location object to force a page to load another page. We can use the location object to set the URL of a new page.

Q.17->What are the disadvantages of using innerHTML in JavaScript? 

=>Disadvantages of innerHTML :-

* Event handlers attached to any DOM element are preserved.
* Replacement is done everywhere.
* It is not possible to append innerHTML.
* Breaks the document.
* Used for Cross-site Scripting.

******************************************************************************************************************************************

Advance JavaScript

MODULE: 1 (Introduction and Code Quality)

Q.1->Write a program to Show an alert.

=>
<!DOCTYPE html>
<html>
<body>

<h2>The alert() Method</h2>

<p>Click the button to see line-breaks in an alert box.</p>

<button onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  alert("Hello\nHow are you?");
}
</script>

</body>
</html>

Q.2->What will be the result for these expressions?

=>

1. 5 > 4                    =>True
2. "apple" > "pineapple"    =>False
3. "2" > "12"		    =>True
4. undefined == null	    =>True
5. undefined === null	    =>False
6. null == "\n0\n"	    =>False
7. 7. null === +"\n0\n"     =>False

Q.3->
● Will alert be shown?

if ("0") { alert( 'Hello'); }

=>Yes, it will.
Any string except an empty one (and "0" is not empty) becomes true in the logical context.

Q.4->What is the code below going to output? alert( null || 2 || undefined );

=>The answer is 2, that's the first truthy value. alert( null || 2 || undefined ).


Q.5-> The following function returns true if the parameter age is greater than
18. Otherwise it asks for a confirmation and returns its result:
function
checkAge(age)
{
if (age> 18) { return true; }
else {
// ...return confirm (‘did parents allow you?');
 }
 }

=>The following function returns true if the parameter age is greater than 18.

Otherwise it asks for a confirmation and returns its result.

Q.6->Replace Function Expressions with arrow functions in the code below:
Function
ask(question, yes, no)
{ if (confirm(question))yes();
else
no();
}
ask("Do you agree?", function()
{ alert("You agreed."); },
function() {
alert("You canceled the execution."); }
 }

=>
function ask(question, yes, no) {
  if (confirm(question)) yes();
  else no();
}

ask(
  "Do you agree?",
  () => alert("You agreed."),
  () => alert("You canceled the execution.")
);


**************************************** MODULE: 2 (Data Types and Objects) *************************************************************

Q.1->Write the code, one line for each action:

a) Create an empty object user.
b) Add the property name with the value John.
c) Add the property surname with the value Smith.
d) Change the value of the name to Pete.
e) Remove the property name from the object.

=>
let user = {};
user.name = "John";
user.surname = "Smith";
user.name = "Pete";
delete user.name;

Q.2->Is array copied?
let fruits = ["Apples", "Pear", "Orange"]; // push a new value into the "copy" let
shoppingCart = fruits; shoppingCart.push("Banana"); // what's in fruits?
alert( fruits.length ); // ?

=>The result is 4:

let fruits = ["Apples", "Pear", "Orange"];

let shoppingCart = fruits;

shoppingCart.push("Banana");

alert( fruits.length ); // 4
That’s because arrays are objects. So both shoppingCart and fruits are the references to the same array.

Q.3->Map to names
let john = { name: "John", age: 25 }; let pete = { name: "Pete", age: 30 }; let mary =
{ name: "Mary", age: 28 }; let users = [ john, pete, mary ]; let names = /* ... your
code */ alert( names ); // John, Pete, Mary

=>
let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 28 };

let users = [ john, pete, mary ];

let names = users.map(item => item.name);

alert( names ); // John, Pete, Mary

Q.4->
Map to objects
let john = { name: "John", surname: "Smith", id: 1 }; let pete = { name: "Pete",
surname: "Hunt", id: 2 }; let mary = { name: "Mary", surname: "Key", id: 3 }; let
users = [ john, pete, mary ]; let usersMapped = /* ... your code ... */
/*
usersMapped = [
{ fullName: "John Smith", id: 1 },
{ fullName: "Pete Hunt", id: 2 },
{ fullName: "Mary Key", id: 3 }
]
*/ alert( usersMapped[0].id ) // 1 alert( usersMapped[0].fullName ) // John Smith

=>
let john = { name: "John", surname: "Smith", id: 1 };
let pete = { name: "Pete", surname: "Hunt", id: 2 };
let mary = { name: "Mary", surname: "Key", id: 3 };

let users = [ john, pete, mary ];

let usersMapped = users.map(user => ({
  fullName: `${user.name} ${user.surname}`,
  id: user.id
}));

/*
usersMapped = [
  { fullName: "John Smith", id: 1 },
  { fullName: "Pete Hunt", id: 2 },
  { fullName: "Mary Key", id: 3 }
]
*/

alert( usersMapped[0].id ); // 1
alert( usersMapped[0].fullName ); // John Smith
Please note that in the arrow functions we need to use additional brackets.

We can’t write like this:

let usersMapped = users.map(user => {
  fullName: `${user.name} ${user.surname}`,
  id: user.id
});
As we remember, there are two arrow functions: without body value => expr and with body value => {...}.

Here JavaScript would treat { as the start of function body, not the start of the object. The workaround is to wrap them in the “normal” brackets:

let usersMapped = users.map(user => ({
  fullName: `${user.name} ${user.surname}`,
  id: user.id
}));
Now fine.


Q.5->Sum the properties There is a salaries object with arbitrary number of salaries. Write
the function sumSalaries(salaries) that returns the sum of all salaries using
Object.values and the for..of loop.If salaries is empty, then the result must be 0.
let salaries = {
"John": 100,
"Pete": 300,
"Mary": 250
};
alert( sumSalaries(salaries) ); // 650

==>function sumSalaries(salaries) {

  let sum = 0;
  for (let salary of Object.values(salaries)) {
    sum += salary;
  }

  return sum; // 650
}

let salaries = {
  "John": 100,
  "Pete": 300,
  "Mary": 250
};

alert( sumSalaries(salaries) ); // 650
Or, optionally, we could also get the sum using Object.values and reduce:

// reduce loops over array of salaries,
// adding them up
// and returns the result
function sumSalaries(salaries) {
  return Object.values(salaries).reduce((a, b) => a + b, 0) // 650
}


Q.6->Destructuring assignment We have an object: Write the Destructuring assignment that
reads:
a) Name property into the variable name.
b) Year’s property into the variable age.
c) isAdmin property into the variable isAdmin (false, if no such property)
d) let user = { name: "John", years: 30};

=>let user = {
  name: "John",
  years: 30
};

let {name, years: age, isAdmin = false} = user;

alert( name ); // John
alert( age ); // 30
alert( isAdmin ); // false

Q.7->Turn the object into JSON and back Turn the user into JSON and then read it back
into another variable.
user = { name: "John Smith", age: 35};

=>let user = {
  name: "John Smith",
  age: 35
};

let user2 = JSON.parse(JSON.stringify(user));